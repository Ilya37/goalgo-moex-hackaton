import os
from datetime import datetime, timedelta
import pandas as pd

from langchain.agents.agent_types import AgentType
from langchain.chat_models import ChatOpenAI
from langchain_experimental.agents.agent_toolkits import create_pandas_dataframe_agent
from langchain.llms import OpenAI
import streamlit as st
from streamlit.logger import get_logger

from moexalgo import Market

logger = get_logger(__name__)

TOKEN = st.secrets["TOKEN"]


# # Page title
st.set_page_config(page_title='üõãÔ∏èüë®‚Äçüíª GPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏')
st.title('üõãÔ∏èüë®‚Äçüíª GPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏')

st.text("""MVP —Ä–µ—à–µ–Ω–∏—è –æ—Ç –∫–æ–º–∞–Ω–¥—ã "–î–∏–≤–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç—ã" —Ö–∞–∫–∞—Ç–æ–Ω–∞ Go Algo –æ—Ç –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏""")


def _generate_date_range(start_date, end_date):
    date_range = [(start_date + timedelta(days=x)) for x in range((end_date - start_date).days + 1)]
    return date_range


# Define your business logic functions or variables
def tradestats(start_date, end_date):
    stocks = Market('stocks')
    dates = _generate_date_range(start_date, end_date)

    result_df = pd.DataFrame()

    for date in dates:
        df = stocks.tradestats(date=date)
        result_df = pd.concat([result_df, df], ignore_index=True)

    with st.expander('See DataFrame'):
      st.write(result_df)
    
    return result_df


def orderstats(start_date, end_date):
    stocks = Market('stocks')
    dates = _generate_date_range(start_date, end_date)

    result_df = pd.DataFrame()

    for date in dates:
        df = stocks.orderstats(date=date)
        result_df = pd.concat([result_df, df], ignore_index=True)

    with st.expander('See DataFrame'):
      st.write(result_df)
    
    return result_df


def obstats(start_date, end_date):
    stocks = Market('stocks')
    dates = _generate_date_range(start_date, end_date)

    result_df = pd.DataFrame()

    for date in dates:
        df = stocks.obstats(date=date)
        result_df = pd.concat([result_df, df], ignore_index=True)
    
    with st.expander('See DataFrame'):
      st.write(result_df)

    return result_df



# Generate LLM response
def generate_response(df, input_query, openai_api_key):
  llm = ChatOpenAI(model_name='gpt-3.5-turbo-0613', temperature=0.2, openai_api_key=openai_api_key)
  # Create Pandas DataFrame Agent
  agent = create_pandas_dataframe_agent(llm, df, verbose=True, agent_type=AgentType.OPENAI_FUNCTIONS)
  # Perform Query using the Agent
  response = agent.run(input_query)
  return st.success(response, icon="‚úÖ")


# Streamlit app
def main(): 
    # Options menu with business mapping
    options_mapping = {
        "–°–¥–µ–ª–∫–∏": tradestats,
        "–ó–∞—è–≤–∫–∏": orderstats,
        "–°—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫": obstats,
    }

    # Date selection - Start Date
    start_date = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞:", datetime.today(), key="start_date")
    #logger.info('start_date {} has type {}', start_date, type(start_date))

    # Date selection - End Date
    end_date = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞:", datetime.today(), key="end_date")
    #logger.info('end_date {} has type {}', end_date, type(end_date))

    # Options selection
    selected_option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", options=list(options_mapping.keys()), index=None)
    logger.info('{}', type(options_mapping[selected_option]))

    question_list = [
      '–ö–∞–∫–∞—è –∞–∫—Ü–∏—è —Å–∞–º–∞—è –¥–æ—Ä–æ–≥–∞—è?',
      '–ü–æ –∫–∞–∫–æ–π –∞–∫—Ü–∏–∏ –±—ã–ª–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫?',
      '–ö–∞–∫–∞—è –∞–∫—Ü–∏—è –∏–º–µ–µ—Ç –±–æ–ª—å—à–∏–µ —à–∞–Ω—Å—ã –Ω–∞ —Ä–æ—Å—Ç —Ü–µ–Ω—ã?',
      '–î—Ä—É–≥–æ–µ',
    ]
    query_text = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞:', question_list, disabled=not selected_option)
    openai_api_key = st.text_input('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è API:', type='password', value=TOKEN, disabled=not (selected_option and query_text))

    st.markdown(
        """
    <style>
        [title="Show password text"] {
            display: none;
        }
    </style>
    """,
        unsafe_allow_html=True,
    )

    if query_text == '–î—Ä—É–≥–æ–µ':
      query_text = st.text_input('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:', disabled=not selected_option)
    if not openai_api_key.startswith('sk-'):
      st.warning('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è API!', icon='‚ö†')
    if openai_api_key.startswith('sk-') and (selected_option is not None):
      st.header('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:')
      try:
        result = options_mapping[selected_option](start_date, end_date)
        generate_response(result, query_text, openai_api_key)
      except Exception as e:
        st.error(f"–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π {selected_option} - —á—Ç–æ-—Ç–æ —Å–µ—Ä–≤–∏—Å–æ–º (–∞ —Ç–æ—á–Ω–µ–µ {str(e)}). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µ")


if __name__ == "__main__":
    main()
